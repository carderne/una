{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Una","text":"<p>Easy monorepos with Python and uv</p> <p>Una is currently a bit broken since uv v0.4.0. Figuring out what to do next.</p> <p>Una is a tool to build and productionise Python monorepos with uv.</p> <p>uv has Workspaces, but no ability to build them. This means if you have dependencies between packages in your workspace, there's no good way to distribute or productionise the end result.</p> <p>Una solves this. No additional configuration is needed: if you have a functional uv Workspace, just add Una. It consists of the following two things:</p> <ol> <li>A CLI to ensure that all imports are correctly specified as dependencies.</li> <li>A build plugin that enables production builds of individual apps within a monorepo by injecting local dependencies and transitive third-party dependencies.</li> </ol> <p>Una doesn't try to replicate a full build system such as Bazel or Pants. It just makes it possible to have a simple monorepo with interdependencies.</p> <p>Una works much like a Rust workspace, with each package having its own pyproject.toml. In general, packages should either be libraries (imported but not run) or apps (run but never imported), but Una will not enforce this.</p> <p>It only works with the Hatch build backend.</p>"},{"location":"#examples","title":"Examples","text":"<p>You can see an example repo here:</p> <ul> <li>una-example</li> </ul>"},{"location":"build/","title":"Build","text":"<p>At build-time, Una itself does nothing. This is when <code>hatch-una</code>, the plugin for Hatch steps in and resolves the graph of dependencies.</p> <p>Assuming your <code>pyproject.toml</code> is correctly configured, and your <code>[tool.una.deps]</code> section includes all necessary dependencies (and transitive dependencies!), then <code>hatch-una</code> will inject all the needed internal dependencies (other stuff in your monorepo) and external dependencies (stuff from PyPI) into your build.</p> <p>So all you need to do is run something like:</p> <pre><code>uvx --from build pyproject-build --installer uv apps/printer\n</code></pre> <p>You'll get some <code>*.whl</code> files, which you can then deploy with Docker or whatever you prefer. They are fully self-contained, so you don't need uv/Hatch or Una or anything else wherever you want to install them.</p>"},{"location":"commands/","title":"CLI Commands","text":"<pre><code>$ una\n\n Usage: una [OPTIONS] COMMAND [ARGS]...\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 create   Commands for creating workspace and packages.\u2502\n\u2502 sync     Update packages with missing dependencies.   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>The usual process to make a contribution is to:</p> <ol> <li>Check for existing related issues</li> <li>Fork the repository and create a new branch</li> <li>Make your changes</li> <li>Make sure formatting, linting and tests passes.</li> <li>Add tests if possible to cover the lines you added.</li> <li>Commit, and send a Pull Request.</li> </ol>"},{"location":"contributing/#fork-the-repository","title":"Fork the repository","text":"<p>So that you have your own copy.</p>"},{"location":"contributing/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone git@github.com:your-username/una.git\ncd una\ngit checkout -b add-my-contribution\n</code></pre>"},{"location":"contributing/#setup-uv","title":"Setup uv","text":"<p>Install it if needed (full instructions here):</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Then sync your local environment:</p> <pre><code>uv sync\n</code></pre>"},{"location":"contributing/#run-all-code-quality-checks","title":"Run all code quality checks","text":"<pre><code>make fmt\nmake lint\nmake check\nmake test\n\n# or\nmake all\n</code></pre>"},{"location":"contributing/#open-a-pr","title":"Open a PR","text":"<p>Push your changes to your branch on your fork, then open a PR against the main repository.</p>"},{"location":"install/","title":"Installation","text":"<p>The CLI tool isn't strictly necessary, as all the stuff that lets the monorepo builds work is in the separate (and tiny) hatch-una package. But you will likely struggle to manage your monorepo without the tool!</p> <p>So you may as well install it:</p> <pre><code>uv add --dev una\n</code></pre> <p>As for the build-time <code>hatch-una</code>, it will automatically be installed by build tools when it spots this in your <code>pyproject.toml</code> (this will be configured automatically by the CLI):</p> <pre><code>[build-system]\nrequires = [\"hatchling\", \"hatch-una\"]\nbuild-backend = \"hatchling.build\"\n</code></pre>"},{"location":"packages/","title":"Packages","text":"<p>You can see an example of this here:</p> <ul> <li>una-example</li> </ul> <p>The structure will look something like the below. This is completely up to you though! Whatever glob patterns you specify in uv's Workspace <code>members</code> table will be supported.</p> <pre><code>.\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 uv.lock\n\u251c\u2500\u2500 apps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pyproject.toml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 your_ns\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 test_server.py\n\u2514\u2500\u2500 libs\n \u00a0\u00a0 \u2514\u2500\u2500 mylib\n \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 pyproject.toml\n \u00a0\u00a0     \u251c\u2500\u2500 your_ns\n \u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 mylib\n \u00a0\u00a0     \u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n \u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 py.typed\n\u00a0 \u00a0     \u2514\u2500\u2500 tests\n \u00a0\u00a0         \u2514\u2500\u2500 test_mylib.py\n</code></pre> <p>At build-time, Una will do the following:</p> <ol> <li>Read the list of internal dependencies (more on this shortly) and inject them into the build.</li> <li>Read all external requirements of those dependencies, and add them to the dependency table.</li> </ol> <p>You can use the Una CLI tool to ensure that all internal dependencies are kept in sync.</p> <ol> <li>Use a uv workspace:</li> </ol> <pre><code># /pyproject.toml\n[tool.uv]\ndev-dependencies = []\n\n[tool.uv.workspace]\nmembers = [\"apps/*\", \"libs/*\"]\n# this could also be something like below\n# if you don't want to separate apps and libs\n# members = [\"packages/*\"]\n</code></pre> <ol> <li>Create your packages as you like.</li> <li>Add external dependencies to your packages as normal. Then, to add an internal dependency to an app, we do the following in its pyproject.toml. This tells uv (and Una!) to find the <code>greeter</code> package locally in the workspace.</li> </ol> <pre><code># /apps/server/pyproject.toml\n[project]\ndependencies = [\"greeter\"]\n\n[tool.uv.sources]\ngreeter = { workspace = true }\n\n[build-system]\nrequires = [\"hatchling\", \"hatch-una\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.build.hooks.una-build]\n[tool.hatch.build.hooks.una-meta]\n</code></pre> <ol> <li>Then you can build from that package directory and Una will inject everything that is needed:</li> </ol> <pre><code>uvx --from build pyproject-build --installer uv\n</code></pre> <ol> <li>Once you have your built <code>.whl</code> file, all you need in your Dockerfile is:</li> </ol> <pre><code>FROM python\nCOPY dist dist\nRUN pip install dist/*.whl\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This will give you a quick view of how this all works.</p> <p>First install uv:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>And start your workspace:</p> <pre><code>uv init unarepo   # choose another name if you prefer\ncd unarepo\ngit init\nuv add --dev una\n</code></pre> <p>Then setup the Una workspace. This will generate a structure and an example lib and app.</p> <pre><code>uv run una create workspace\nrm -rf src\nuv sync\n</code></pre> <p>Have a look at what's been generated:</p> <pre><code>tree\n</code></pre> <p>Have a look at the generated <code>__init__.py</code> files in the <code>apps/printer</code> and <code>libs/greeter</code> packages. An external dependency (cowsay-python) has also been added to the latter's <code>pyproject.toml</code>.</p> <p>The magic of Una then comes in to resolve the graph of direct and transitive dependencies, which looks like this:</p> <pre><code>printer --&gt; greeter --&gt; cowsay-python\n</code></pre> <p>You can do this by running the following:</p> <pre><code># this checks all imports and ensures they are added to\n# project.dependencies and tool.uv.sources in the each pyproject.toml\nuv run una sync\n</code></pre> <p>Have a look at what happened:</p> <pre><code>tail apps/printer/pyproject.toml\n</code></pre> <p>It added <code>greeter</code> as an internal dependency to <code>printer</code>. It didn't add <code>cowsay-python</code>, as transitive external dependencies are only resolved at build-time.</p> <p>Now you can build your app. Note that you must specify the <code>--wheel</code> parameter. Una doesn't currently work for builds that do source -&gt; sdist -&gt; wheel, as these break some things with uv virtual envs.</p> <pre><code>uvx --from build pyproject-build --installer=uv \\\n    --outdir=dist --wheel apps/printer\n# this will inject the cowsay-python external dependency\n</code></pre> <p>And see the result:</p> <pre><code>ls dist/\n</code></pre> <p>And you can do whatever you want with that wheel! What about stick it in a Dockerfile, have you ever seen such a simple one?</p> <pre><code>FROM python\nCOPY dist dist\nRUN pip install dist/*.whl\n</code></pre> <p>And run it:</p> <pre><code>docker build --tag unarepo-printer .\ndocker run --rm -it unarepo-printer python -c 'from unarepo.printer import run; run()'\n</code></pre>"},{"location":"types-tests/","title":"Types and tests","text":""},{"location":"types-tests/#pyright","title":"Pyright","text":"<p>You'll need to configure pyright for each package.</p> <p>That is, you should add something like the config below to each <code>apps/*/pyproject.toml</code> and <code>libs/*/pyproject.toml</code>.</p> <pre><code>[tool.pyright]\nvenvPath = \"../..\"\nvenv = \".venv\"\npythonVersion = \"3.11\"\nstrict = [\"**/*.py\"]\n</code></pre> <p>Once that is added, you can run <code>uv run pyright</code> in the root and it should work correctly.</p>"},{"location":"types-tests/#pytest","title":"Pytest","text":"<p>You can just configure pytest as follows in the root pyproject.toml:</p> <pre><code>[tool.pytest.ini_options]\npythonpath = [\n  \"apps/*\",\n  \"libs/*\"\n]\ntestpaths = [\n  \"apps/*\",\n  \"libs/*\",\n]\naddopts = \"\"\n</code></pre>"}]}